<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- log4jdbc-remix 설정을 위해 기존 dataSource id 변경 후 해당 빈을 참조하는 proxyDataSource 만들기 -->
	<bean id="dataSourceSpied" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />
		<property name="username" value="fanther" />
		<property name="password" value="fanther" />
		<property name="defaultAutoCommit" value="false" />
	</bean>
	<bean id="dataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
		<constructor-arg ref="dataSourceSpied"/>
		<property name="logFormatter">
			<bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
				<property name="loggingType" value="MULTI_LINE"/>
				<property name="sqlPrefix" value="[SQL]"/>
			</bean>
		</property>
	</bean>
	
	<!-- * mybatis SqlSession 등록 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- mybatis-config.xml 설정 불러오기 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 최종적으로 활용할 bean은 sqlSessionTemplate
		 <constructor-arg> : 생성자를 이용한 값 세팅 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession" />
	</bean>
	
	<!-- 파일 업로드 관련 Bean 등록 -->
	<!-- MultipartResolver -->
	<bean id="multipartResolver"
	class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="100000000"/>
		<property name="maxInMemorySize" value="100000000"/>
	</bean>
	<!-- 
		maxUploadSize : 한 요청 당 업로드가 허용 되는 최대 용량을 바이트 단위로 설정
		-1은 제한이 없다는 뜻으로 이 프로퍼티를 지정하지 않았을 때의 기본 값
		
		maxInMemorySize : 디스크에 저장하지 않고 메모리에 유지하도록 허용하는 바이트 단위의 최대 용량을 설정
		기본 값 10240 바이트
	 -->
	 
	 <!-- 트랜잭션 처리 (commit/rollback)
	 	트랜잭션이란? 비즈니스 로직에서 하나의 단위 작업
	 	A,B 작업이 하나의 트랜잭션으로 묶여있는 경우 A는 성공, B는 실패했을 때
	 	해당 작업 단위는 실패로 끝나야 함 -> A,B 모두 rollback 처리 필요
	 	
	 	JDBC : Connection 객체
	 	Mybatis : sqlSession 객체
	 	Spring : TransactionManager 객체
	  -->
	  
	  <bean id="transactionManager"
	  	class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	  	<property name="dataSource" ref="dataSource"/>
	  </bean>
	  
	  <!-- 어노테이션을 통한 transaction 적용(namespace : tx 추가) 
	  Spring AOP가 이용되며 AOP는 기본적으로 Dynamic Proxy를 이용 (메소드 호출 시 동적으로 weaving)
	  Dynamic Proxy는 인터페이스 기반으로 동작하기 때문에 인터페이스가 없을 경우 트랜잭션이 동작하지 않음
	  => proxy-target-class="true" 설정 (인터페이스 없어도 동작 가능)
	  -->
	  
	  <tx:annotation-driven transaction-manager="transactionManager"
	  proxy-target-class="true"/>
	  
	  <!-- selectBoard 메소드로 이동 -->
		
</beans>
