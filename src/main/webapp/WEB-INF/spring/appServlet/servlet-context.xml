<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.kh.fantimate" />
	
	<!-- 언어 설정 -->
	
	
	<!-- XML 방식은 HandlerMapping과 Controller를 명시적으로 bean으로 등록 -->
	<!-- HandlerMapping 등록 -->
	<!-- 
		<beans:bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
			<beans:property name="mappings">
				<beans:props>
					<beans:prop key="member/login">login</beans:prop>
				</beans:props>
			</beans:property>
		</beans:bean>
	 -->
	 <!-- 위의 HandlerMapping에 해당하는 Controller 등록 -->
	 <!-- 
	 	<beans:bean id="login" class="com.kh.spring.member.controller.LoginController"/>
	  -->
	  
	 <!-- 
	 	XML 방식으로 작업 시
	 	해당 설정 파일에서 등록 된 bean 들을 한 눈에 볼 수 있어 관리 편의성 높음
	 	bean 개수가 많아지면 XML 파일 관리가 어렵고 여러 개발자가 같은 설정 파일을 수정하면서 충돌이 발생하기 쉬움
	 	
	 	Annotation 방식으로 작업 시
	 	HandlerMapping과 Controller를 명시적으로 등록할 필요 없이
	 	작업하는 클래스 위에 @Controller, 메소드 위에 @RequestMapping("url-pattern")을 붙여서 표기
	 	
	 	<annotation-driven />
	 	=> 어노테이션 활성화
	 	Spring MVC가 @Controller에 요청을 보내기 위해 필요한 HandlerMapping과 HandlerAdapter를 bean으로 등록
	 	
	 	<context:component-scan base-package="com.kh.spring" />
	 	=> 특정 패키지 안의 클래스들을 스캔하고, Annotation을 확인 후 bean 인스턴스 생성
	 	
	 	=> XML 방식처럼 각 기능에 맞는 Controller 클래스들을 따로 만들어줄 필요 없이
	 	   Annotation 방식으로 하나의 Controller로 통합하고 메소드별로 각 기능이 실행되도록 작업해보자
	  -->
	  
	  <!-- interceptor 등록하기
	  <interceptors>
	  	<interceptor>
	  		<mapping path="/**"/>
	  		<beans:bean id="loggerInterceptor" 
	  		class="com.kh.spring.common.interceptor.LoggerInterceptor"/>
	  	</interceptor>
	  	Login 하지 않고 공지사항, 게시판에 접근하는 것을 막기 위한 LoginInterceptor
	  	<interceptor>
	  		<mapping path="/*/list"/>
	  		<beans:bean id="loginInterceptor"
	  		class="com.kh.spring.common.interceptor.LoginInterceptor"/>
	  	</interceptor>
	  </interceptors> -->
		
	  <!-- 스프링 스케쥴러 @Scheduled 어노테이션 사용을위해 추가 -->
	  <!-- <task:annotation-driven/> -->
	
  	<!-- jsonView bean 등록 : 라이브러리 추가 후 진행 (json-lib-ext-spring) -->
	<beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView" />
	
	<!-- bean의 이름이 존재하면 해당 뷰를 사용하고, 존재하지 않으면 기본 InternalResourceViewResolver를 사용 -->
	<!-- ViewResolver라 하면, viewName과 실제 view단을 연결해주는 역할을 하는데
		 BeanNameViewResolver는 요청한 viewName과 실제 bean 이름을 매핑해주는 역할을 함 -->
	<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<!-- 우선 순위를 설정하여 해당 뷰 리졸버를 우선 동작 -->
		<beans:property name="order" value="0"/>
	</beans:bean>
	
</beans:beans>
